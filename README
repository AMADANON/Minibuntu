 - 0 - Index -----------------------------------------------------------------
	0 Index
	1 Overhead
		1.1 VERY IMPORTANT, READ THIS
		1.2 History
	2 To-do list
		2.1 Complete
		2.2 In progress
		2.3 To-do
	3 Usage instructions
		3.1 build.pl
		3.2 lister.pl
		3.3 A complete (?) example

 - 1.1 - VERY IMPORTANT, READ THIS -------------------------------------------
SUMMARY: If you distribute installs made by this software, you are likely to be in breach of the software license.


People who wrote this stuff are all kinds of awesome, and I bow down at their feet. Please respect their rights.

Long winded explanation:
So this program builds boxes, according to your specs.

It allows you to ditch files you don't think are very important. These are likely to include documentation files, readme files, and of course, licenses. You don't need a copy of licenses in your chroot or initrd filesystems, do you?

Well, maybe you do.

Some Opensource licenses require attribution (and rightly so!), and distribution of the source. This means that if you build a system with this software, and distribute it, you are probably in breach of the license.

So don't do it.

See "Create documentation and source archives" in the "Todo" list.


 - 1.2 - History -------------------------------------------------------------
Ok, so I was setting up this embedded box....

I was setting up this embedded box, with limited hardware, especially disk. I love Ubuntu's package management, and the fact that everything is tested together. It has a large customer base, and with enough eyes all bugs are shallow. It's great for desktop & server.

For embedded, not so much.

This is largely due to the dependencies. There are numerous dependencies (almost all of which are very reasonable for Ubuntu's target audience), which either aren't *really* needed, may or may not be needed depending on the target, or are only needed for installation, not for running. For example, udev requires adduser. Really? And adduser brings perl along. Repeat this several times, and hey presto, you have a huge (100s of megabytes) system, just for bash....

So, I started unpacking packages by hand, then as the project grew, wrote a makefile, then as it grew more, some perl scripts cobbled together.

Later, I was fiddling around with network booting a box, with DSL. I wanted to amake a box which ran entirely from Initrd, and I realised that I was doing the same thing again.

Later still, I was setting up a chroot environment, for just one application. Same again....

Thus was created this project. It creates stand-alone filesystems, suitable for embedded, chroot, or initrd-style applications.

 - 2 - To-do list ----------------------------------------------------------
1. Complete
	1.001 Download packages
	1.002 Install packages into target directory
	1.003 Basic dependencies (excluding those with 'or' clauses, and specific versions.
	1.004 Install only the latest version of a given package. Package version naming is quite complex, so leave up to dpkg.
	1.005 Allow (some) overriding of packages
	1.006 Compile package data into GDBM file, for quick retrieval without rebuilding package list each time.
	1.007 Utility to list GDBM (packagedb, overrides) - lister.pl

2. In progress.
	2.001 Tidy code - Create a perl object for the packagedb, and an object for each package.

3. To do (in no particular order
	3.001 Seperate system into library, build, and edit scripts.
	3.002 Create different output formats (iso, initrd, tar.gz)
	3.003 Create additional documentation archive (which contains all the documentation, copyright, licenses etc, that was removed from the main filesystem) [for GPL compliance]
	3.004 Create additional "source" archive, which contains all the source of all the packages on the filesystem [for GPL compliance]
	3.005 Better editing of packages - maybe X? Maybe plugin architecture?
	3.006 Fix dependencies of specific version - "libacl1 (>= 2.2.11-1)"
	3.007 Fix dependencies with 'or' clauses - "debconf (>= 0.5) | debconf-2.0"
	3.008 Allow adding of hard-coded files; e.g. /etc/passwd, /etc/shadow and so forth to a package; text and binary.
	3.009 Allow marking of package as "don't want it to be included", and mark packages that depend on these (in-memory only).
	3.010 Allow adding of symlinks
	3.011 3 levels of packages - Local changes (highest priority), Minibuntu shared, Ubuntu or Debian stock. Shared should be audited very carefully, and should never conflict with (override) Ubuntu stock - careful naming schedule?
	3.012 Divide files in packages into 3 groups: "install", "documentation", or "dont install"
	3.013 Check for file changes.
	3.014 Allow overriding of permissions & ownership
	3.015 Fakeroot, where neccesary & possible.

 - 3 - Usage instructions ---------------------------------------------------
Ok, so this is what you've really come here for. How do you operate this dag-nabbed device?

3.1 - build.pl

This does most of the heavy lifting.

./build.pl help
	Show basic instructions on how to use this doo-hickey.

./build.pl builddb
	This builds the main package database. You will need to do this before editing package definitions, or building a filesystem.
	Before running this, you must have a sources.list, in the current directory (if not you will be told you need one, and where to get one).

./build.pl edit <list of packages>
	This requires the package database to be built first - see ./build.pl builddb.
	This shows you a list of all the packages you have requested, plus all the packages that they depend on. You will then be able to edit individual packages, changing which packages depend on what other packages, what they "provide", and so forth. Editing dependencies are likely to change what other packages will be included - this is calculated on the fly.
	Unless you are doing this once-off, you should probably use one package; e.g. _mymachine (note leading underscore - this guarentees that it will never conflict with stock packages), then set that one package up to depend on any others you want, directly or indirectly.

./build.pl build <list of packages>
	Builds a filesystem in root-target/ with the selected packages, and all their dependencies.

./build.pl get-kernel <which kernel>
	Downloads a specific kernel, e.g. generic, server, or virtual, and puts it in the current directory.

3.2 lister.pl
Shows the contents of one of the databases. For debugging purposes.

./lister.pl <databasename>
	List the contents of one of the package databases. 
	The database should probably either be packagedb.dbm (for stock Ubuntu/Debian packages), or overrides.dbm (for, well, overrides).

./lister.pl <databasename> <package>
	List all info about all versions of a specified package (e.g. 'libc6')

./lister.pl <databasename> <package> +
	(The '+' is a literal in this case)
	List all info about the latest version of a specified package

./lister.pl <databasename> <package> <version>
	List all info about a specified version of the specified package

3.3 A complete (?) example
Ok, so here we are going to run through an example.

Say you wanted to build a real simple box, running from qemu, with busybox, and nothing else.

3.3.1 We need a sources list. You can use your existing Ubuntu or Debian one, or you can go to http://repogen.simplylinux.ch/ and build a new (Ubuntu) one. Save the sources.list in the main directory.

3.3.2 Build the package database:
./build.pl builddb
This downloads the latest package lists, and compiles them into a database. It will take a while to download them.

3.3.3 Edit your machine part 1 - Dependencies:
You can specify any packages you want on the commandline, but I prefer to put just the name of the machine I'm building:
./build.pl edit _mybusybox

This creates a new (local) package. By starting it with an underscore, it's clear that it's a home-made package, and will never conflict with an Ubuntu or Debian package name.

You will see a list of packages (currently, only _mybusybox). Lets open up that package (press "1" and enter). You will see that it has a name (_mybusybox), it depends on nothing (Depends and Pre-Depends), provides nothing, and nothing depends on it (ReverseDeps).

Now we will change it - _mybusybox will depend on busybox. Press "3" and enter to edit the depends, type in busybox (this is a comma-seperated list), and press enter. Then press "6" and enter to go back to the main menu.

You should now see a lot more packages. You said _mybusybox depends on busybox, but busybox in turn depends on other packages.

But wait a minute, why is tzdata there? We don't care about tzdata, and we don't want it clogging up diskspace. So select tzdata, press enter, and see why it is there. ReverseDeps (what depends on this package?) shows that it's there because libc6 depends on tzdata. Fine for a desktop box, not fine for our mini box.

Select ReverseDeps, and you will jump to the package that depends on it (if there is more than one, you will be asked which reverse dep you want). Indeed, we see that libc6 depends on a lot of things. Lets clear that out - edit the depends, think about what libc6 *really* depends on, and type it in. In my case, it depends only on libgcc1, so I'll change it to that.

Now back to the main menu. You'll notice that the unneeded packages disappear as soon as they're not needed, so you can easily see where you're up to.

Going on, you might decide that gcc-4.4-base is also not needed - going into the package, we see it is there because libgcc1 "requires" it - we disagree, so we go to reverse-depends to libgcc1, and change the depends so it only needs libc6.


3.3.4 Edit your machine part 2 - Removing files:
This is a future feature. TODO.

3.3.5 Edit your machine part 3 - Adding files:
This is a future feature. TODO.

3.3.6 Edit your machine part 4 - Renaming files:
This is a future feature. TODO.

3.3.7 Edit your machine part 5 - Compiling from source:
This is a future feature. TODO.

Once you're happy with your box, quit out. You do not need to save; every change you make will be immediately saved.

3.3.8 Build a chroot environment, for basic testing.
This step may be skipped.
./build.pl build _mybusybox

This downloads the packages you have selected, unpacks them, shuffles things around as you requested, and builds a root filesystem. Please note that, due to the way that minibuntu works, many other packages may be downloaded which you don't need. The files are placed in the "target" directory, which is first removed if it exists.

TODO: This needs to be in the build process.
Copy a file into target/ called init, make it executable, and put the following text in it:

#!/bin/busybox ash
/bin/busybox ash


At this point, you can, as root, and run:

chroot target/ /init

Which sets up a fake environment with target as the root, and then runs /bin/busybox ash (which is a shell). Everything should be as you want it, you can explore your environment, without having to wait for anything to boot up. This will only work for basic things - don't mount partitions in your new space or try to do networky things unless you know what you're doing.

3.3.9 Running initrd under qemu or network boot
Make sure your image has a file called init, in the root directory (i.e. target/init), which is executable.

Now, we generate an initrd filesystem:
Build the box from scratch, and output the result as an initrd-format file. The initrd format is cpio (newc format), compressed with gzip. Build does all this for us:
./build.pl -cpio.gz build _mybusybox

This will create a file called root.cpio.gz

You will also need a kernel. To get the latest kernel:
./build get-kernel virtual
(Instead of "virtual", you could also specify one of the other kernels available - currently generic and server should work, depending on your distro).

This downloads a file (a kernel) called vmlinuz-(something)-virtual.

Then you can run qemu:

qemu -kernel vmlinuz-(something)-virtual -initrd root.cpio.gz -append quiet

Replace the vmlinuz-(something)-virtual with the exact filename of the kernel.

If all goes well, qemu should start up, and after a few seconds (or more depending on your computer) you should see the prompt:

/ # _

Congratulations! You have booted your first minibuntu box.

The entire filesystem is running in memory, from an initrd filesystem. When you reboot, everything will be reset back to default.
