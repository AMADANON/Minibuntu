 - 0 - Index -----------------------------------------------------------------
	0 Index
	1 Overhead
		1.1 VERY IMPORTANT, READ THIS
		1.2 History
	2 To-do list
		2.1 Complete
		2.2 In progress
		2.3 To-do
	3 Usage instructions

 - 1.1 - VERY IMPORTANT, READ THIS -------------------------------------------
SUMMARY: If you distribute installs made by this software, you are likely to be in breach of the software license.


People who wrote this stuff are all kinds of awesome, and I bow down at their feet. Please respect their rights.

Long winded explanation:
So this program builds boxes, according to your specs.

It allows you to ditch files you don't think are very important. These are likely to include documentation files, readme files, and of course, licenses. You don't need a copy of licenses in your chroot or initrd filesystems, do you?

Well, maybe you do.

Some Opensource licenses require attribution (and rightly so!), and distribution of the source. This means that if you build a system with this software, and distribute it, you are probably in breach of the license.

So don't do it.

See "Create documentation and source archives" in the "Todo" list.


 - 1.2 - History -------------------------------------------------------------
Ok, so I was setting up this embedded box....

I was setting up this embedded box, with limited hardware, especially disk. I love Ubuntu's package management, and the fact that everything is tested together. It has a large customer base, and with enough eyes all bugs are shallow. It's great for desktop & server.

For embedded, not so much.

This is largely due to the dependencies. There are numerous dependencies (almost all of which are very reasonable for Ubuntu's target audience), which either aren't *really* needed, may or may not be needed depending on the target, or are only needed for installation, not for running. For example, udev requires adduser. Really? And adduser brings perl along. Repeat this several times, and hey presto, you have a huge (100s of megabytes) system, just for bash....

So, I started unpacking packages by hand, then as the project grew, wrote a makefile, then as it grew more, some perl scripts cobbled together.

Later, I was fiddling around with network booting a box, with DSL. I wanted to amake a box which ran entirely from Initrd, and I realised that I was doing the same thing again.

Later still, I was setting up a chroot environment, for just one application. Same again....

Thus was created this project. It creates stand-alone filesystems, suitable for embedded, chroot, or initrd-style applications.

 - 2 - To-do list ----------------------------------------------------------
1. Complete
	1.001 Download packages
	1.002 Install packages into target directory
	1.003 Basic dependencies (excluding those with 'or' clauses, and specific versions.
	1.004 Install only the latest version of a given package. Package version naming is quite complex, so leave up to dpkg.
	1.005 Allow (some) overriding of packages
	1.006 Compile package data into GDBM file, for quick retrieval without rebuilding package list each time.

2. In progress.
	2.001 Tidy code - Create a perl object for the packagedb, and an object for each package.

3. To do (in no particular order
	3.001 Seperate system into library, build, and edit scripts.
	3.002 Create different output formats (iso, initrd, tar.gz)
	3.003 Create additional documentation archive (which contains all the documentation, copyright, licenses etc, that was removed from the main filesystem) [for GPL compliance]
	3.004 Create additional "source" archive, which contains all the source of all the packages on the filesystem [for GPL compliance]
	3.005 Better editing of packages - maybe X? Maybe plugin architecture?
	3.006 Fix dependencies of specific version - "libacl1 (>= 2.2.11-1)"
	3.007 Fix dependencies with 'or' clauses - "debconf (>= 0.5) | debconf-2.0"
	3.008 Allow adding of hard-coded files; e.g. /etc/passwd, /etc/shadow and so forth to a package; text and binary.
	3.009 Allow marking of package as "don't want it to be included", and mark packages that depend on these (in-memory only).
	3.010 Allow adding of symlinks
	3.011 3 levels of packages - Local changes (highest priority), Minibuntu shared, Ubuntu or Debian stock. Shared should be audited very carefully, and should never conflict with (override) Ubuntu stock - careful naming schedule?
	3.012 Divide files in packages into 3 groups: "install", "documentation", or "dont install"
	3.013 Check for file changes.

 - 3 - Usage instructions ---------------------------------------------------
Ok, so this is what you've really come here for. How do you operate this dag-nabbed device?

./build.pl help
	Show basic instructions on how to use this doo-hickey.

./build.pl builddb
	This builds the main package database. You will need to do this before editing package definitions, or building a filesystem.
	Before running this, you must have a sources.list, in the current directory (if not you will be told you need one, and where to get one).

./build.pl edit <list of packages>
	This requires the package database to be built first - see ./build.pl builddb.
	This shows you a list of all the packages you have requested, plus all the packages that they depend on. You will then be able to edit individual packages, changing which packages depend on what other packages, what they "provide", and so forth. Editing dependencies are likely to change what other packages will be included - this is calculated on the fly.
	Unless you are doing this once-off, you should probably use one package; e.g. _mymachine (note leading underscore - this guarentees that it will never conflict with stock packages), then set that one package up to depend on any others you want, directly or indirectly.

./build.pl build <list of packages>
	Builds a filesystem in root-target/ with the selected packages, and all their dependencies.
